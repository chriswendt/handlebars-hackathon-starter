"use strict";

var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

var _slicedToArray = function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { var _arr = []; for (var _iterator = arr[Symbol.iterator](), _step; !(_step = _iterator.next()).done;) { _arr.push(_step.value); if (i && _arr.length === i) break; } return _arr; } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } };

var _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var MapGenerator = _interopRequire(require("./map-generator"));

var Result = _interopRequire(require("./result"));

var parse = _interopRequire(require("./parse"));

var Root = _interopRequire(require("./root"));

var warn = _interopRequire(require("./warn"));

function isPromise(obj) {
    return typeof obj === "object" && typeof obj.then === "function";
}

var LazyResult = (function () {
    function LazyResult(processor, css, opts) {
        _classCallCheck(this, LazyResult);

        this.stringified = false;
        this.processed = false;

        var root = undefined;
        if (css instanceof Root) {
            root = css;
        } else if (css instanceof LazyResult || css instanceof Result) {
            root = css.root;
            if (css.map && typeof opts.map === "undefined") {
                opts.map = { prev: css.map };
            }
        } else {
            root = parse(css, opts);
        }

        this.result = new Result(processor, root, opts);
    }

    LazyResult.prototype.warnings = function warnings() {
        return this.sync().warnings();
    };

    LazyResult.prototype.toString = function toString() {
        return this.css;
    };

    LazyResult.prototype.then = function then(onFulfilled, onRejected) {
        return this.async().then(onFulfilled, onRejected);
    };

    LazyResult.prototype["catch"] = function _catch(onRejected) {
        return this.async()["catch"](onRejected);
    };

    LazyResult.prototype.asyncTick = function asyncTick(plugins, resolve, reject) {
        var _this = this;

        if (plugins.length === 0) {
            return resolve();
        }var promise = this.run(plugins.shift());
        if (isPromise(promise)) {
            promise.then(function () {
                _this.asyncTick(plugins, resolve, reject);
            })["catch"](function (error) {
                reject(error);
            });
        } else {
            this.asyncTick(plugins, resolve, reject);
        }
    };

    LazyResult.prototype.async = function async() {
        var _this = this;

        if (this.processed) {
            return Promise.resolve().then(function () {
                return _this.stringify();
            });
        }
        if (this.processing) {
            return this.processing;
        }

        var plugins = this.processor.plugins.slice(0);
        this.processing = new Promise(function (resolve, reject) {
            _this.asyncTick(plugins, resolve, reject);
        }).then(function () {
            _this.processed = true;
            return _this.stringify();
        });

        return this.processing;
    };

    LazyResult.prototype.sync = function sync() {
        if (this.processed) {
            return this.result;
        }this.processed = true;

        if (this.processing) {
            throw "Use process(css).then(cb) to work with async plugins";
        }

        for (var _iterator = this.result.processor.plugins, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
            var _ref;

            if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
            } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
            }

            var plugin = _ref;

            var promise = this.run(plugin);
            if (isPromise(promise)) {
                throw "Use process(css).then(cb) to work with async plugins";
            }
        }

        return this.result;
    };

    LazyResult.prototype.run = function run(plugin) {
        this.result.lastPlugin = plugin;

        var returned = undefined;
        try {
            returned = plugin(this.result.root, this.result);
        } catch (error) {
            if (plugin.postcssVersion) {
                var pluginName = plugin.postcssPlugin;
                var pluginVersion = plugin.postcssVersion;
                var runtimeVersion = this.result.processor.version;
                var a = pluginVersion.split(".");
                var b = runtimeVersion.split(".");

                if (a[0] !== b[0] || parseInt(a[1]) > parseInt(b[1])) {
                    warn("" + pluginName + " is based on PostCSS " + pluginVersion + " " + ("but you use it with PostCSS " + runtimeVersion + ". ") + "Maybe this is a source of error below.");
                }
            }
            throw error;
        }

        if (returned instanceof Root) {
            this.result.root = returned;
        } else {
            return returned;
        }
    };

    LazyResult.prototype.stringify = function stringify() {
        if (this.stringified) {
            return this.result;
        }this.stringified = true;

        this.sync();
        var map = new MapGenerator(this.result.root, this.result.opts);

        var _ref = map.generate();

        var _ref2 = _slicedToArray(_ref, 2);

        this.result.css = _ref2[0];
        this.result.map = _ref2[1];

        return this.result;
    };

    _createClass(LazyResult, {
        processor: {
            get: function () {
                return this.result.processor;
            }
        },
        opts: {
            get: function () {
                return this.result.opts;
            }
        },
        css: {
            get: function () {
                return this.stringify().css;
            }
        },
        map: {
            get: function () {
                return this.stringify().map;
            }
        },
        root: {
            get: function () {
                return this.sync().root;
            }
        },
        messages: {
            get: function () {
                return this.sync().messages;
            }
        }
    });

    return LazyResult;
})();

module.exports = LazyResult;